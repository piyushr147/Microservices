services:
  #This is config for adding mysql db but for now im using H2.
  # accountsdb:
  #   container_name: accountsdb
  #   ports:
  #     - "3306:3306"
  #   environment:
  #     MYSQL_DATABASE: dbaccounts
  #   extends:
  #     file: common-config.yml
  #     service: microservices-db-config

  # cardsdb:
  #   container_name: cardsdb
  #   ports:
  #     - "3307:3306"
  #   environment:
  #     MYSQL_DATABASE: dbcards
  #   extends:
  #     file: common-config.yml
  #     service: microservices-db-config

  # loansdb:
  #   container_name: loansdb
  #   ports:
  #     - "3308:3306"
  #   environment:
  #     MYSQL_DATABASE: dbloans
  #   extends:
  #     file: common-config.yml
  #     service: microservices-db-config
  keycloak:
    image: quay.io/keycloak/keycloak:26.2.0
    container_name: keycloak
    ports:
      - "7080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-config

  rabbit:
    image: rabbitmq:3.13-management  # Use the RabbitMQ image with the management UI
    hostname: rabbitmq  # Set the RabbitMQ hostname
    ports:
      - "5672:5672"  # Map host port 5672 to container port 5672 (used by applications to send/receive messages)
      - "15672:15672"  # Map host port 15672 to container port 15672 (used for RabbitMQ management UI access)
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity  #Checks if RabbitMQ ports are accessible.
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-config

  redis:
    image: redis
    ports:
      - "6379:6379"  # Map host port 6379 to container port 8071 (used by Spring Boot applications to fetch configurations)
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    extends:
      file: common-config.yml
      service: network-deploy-config

  gatewayserver:
    image: "piyushrawat147/gatewayserver:v9"
    container_name: gatewayserver
    ports:
      - "8072:8072"  # Map host port 8071 to container port 8071 (used by Spring Boot applications to fetch configurations)
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
      redis:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-eureka-config
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI: "http://keycloak:8080/realms/master"

  eurekaserver:
    image: "piyushrawat147/eurekaserver:v9"
    container_name: eurekaserver
    ports:
      - "8070:8070"  # Map host port 8071 to container port 8071 (used by Spring Boot applications to fetch configurations)
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8070/actuator/health" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    depends_on:
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"

  configserver:
    image: "piyushrawat147/configserver:v9"
    container_name: configserver
    ports:
      - "8071:8071"  # Map host port 8071 to container port 8071 (used by Spring Boot applications to fetch configurations)
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit" #Calls the Spring Boot Actuator health endpoint.
      start_interval: 10s
      timeout: 5s
      interval: 10s
      retries: 10
    extends:
      file: common-config.yml
      service: microservices-base-config

  accounts:
    image: "piyushrawat147/accounts:v9"
    container_name: accounts-ms
    #commented port mapping to make it unaccessible from localhost, only available through docker container
    #ports:
    #  - "8080:8080"  # Map host port 8080 to container port 8080 (used by Spring Boot applications to fetch configurations)
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit" #Calls the Spring Boot Actuator health endpoint.
      start_interval: 10s
      timeout: 5s
      interval: 10s
      retries: 10
    environment:
      SPRING_APPLICATION_NAME: "accounts"
      #SPRING_DATASOURCE_URL: jdbc:mysql://accountsdb:3306/dbaccounts
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      #accountsdb:
        #condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-eureka-config

  cards:
    image: "piyushrawat147/cards:v9"
    container_name: cards-ms
    #commented port mapping to make it unaccessible from localhost, only available through docker container
    #ports:
    #  - "8080:8080"  # Map host port 8080 to container port 8080 (used by Spring Boot applications to fetch configurations)    
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health/readiness | grep UP || exit" #Calls the Spring Boot Actuator health endpoint.
      start_interval: 10s
      timeout: 5s
      interval: 10s
      retries: 10
    environment:
      SPRING_APPLICATION_NAME: "cards"
      #SPRING_DATASOURCE_URL: jdbc:mysql://cardsdb:3306/dbcards
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      #cardsdb:
        #condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-eureka-config

  loans:
    image: "piyushrawat147/loans:v9"
    container_name: loans-ms
    #commented port mapping to make it unaccessible from localhost, only available through docker container
    #ports:
    #  - "8080:8080"  # Map host port 8080 to container port 8080 (used by Spring Boot applications to fetch configurations)
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health/readiness | grep UP || exit" #Calls the Spring Boot Actuator health endpoint.
      start_interval: 10s
      timeout: 5s
      interval: 10s
      retries: 10
    environment:
      SPRING_APPLICATION_NAME: "loans"
      #SPRING_DATASOURCE_URL: jdbc:mysql://loansdb:3306/dbloans
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      #loansdb:
        #condition: service_healthy
    extends:
      file: common-config.yml
      service: microservices-eureka-config

networks:
  piyushrawat147:
    driver: "bridge" # Use the 'bridge' driver to create an isolated network for these services