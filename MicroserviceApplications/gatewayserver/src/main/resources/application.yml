spring:
  application:
    name: "gatewayserver"  # Defines the application name as 'gatewayserver'
  config:
    import: "optional:configserver:http://localhost:8071/"
    # This tells the application to fetch configuration from the Config Server running at http://localhost:8071/
    # The 'optional:' prefix means that if the Config Server is unavailable, the application will still start.
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false #making it false for now, because i have added programmatic approach to handle routes dynamically
          # Enables automatic service discovery using Spring Cloud Gateway
          # This allows dynamic routing of API requests to registered services in Eureka
          lower-case-service-id: true
          #Microservices will be identified with lowercase name, no need for mandatory upper case names
      httpclient:
        connect-timeout: 1000  # = 1 second
        # ⏱️ Maximum time (in milliseconds) to establish a TCP connection to a service, this is global for every service.
        response-timeout: 2s   # = 2 seconds
        # ⌛ Maximum time to wait for the full response after the connection is established from the service.
  data:
    redis:
      host: localhost
      port: 6379
      connect-timeout: 3s
      timeout: 2s

management:
  endpoints:
    web:
      exposure:
        include: "*" # Exposes all Actuator endpoints via HTTP.
  endpoint:
    gateway:
      access: unrestricted  # Allows unrestricted access to the /actuator/gateway endpoint
  info:
    env:
      enabled: true

info:
  app:
    name: "gatewayserver"
    description: "Edge server or API gateway Application"
    version: "1.0.0"

logging:
  level:
    com:
    springBoot:
      gatewayserver: DEBUG

resilience4j:
  circuitbreaker:
    configs:
      default:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 10
        #The circuit automatically transitions to HALF-OPEN after waitDurationInOpenState expires — but only when a new request arrives.
        #Important: The circuit breaker is lazy — it doesn't proactively ping the downstream service. It just waits.
        permitted-number-of-calls-in-half-open-state: 3
